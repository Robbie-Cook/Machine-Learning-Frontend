{"version":3,"sources":["../../src/commands/build.js"],"names":["report","require","buildHTML","buildProductionBundle","bootstrap","apiRunnerNode","copyStaticDirs","initTracer","stopTracer","chalk","tracer","globalTracer","signalExit","telemetry","store","reportFailure","msg","err","log","panic","module","exports","program","openTracingConfigFile","trackCli","buildSpan","startSpan","setTag","directory","parentSpan","graphqlRunner","graphql","activity","activityTimer","start","catch","end","buildPages","stage","pagePaths","getState","pages","keys","stripIndent","context","path","bold","info","process","uptime","finish","build"],"mappings":";;;;;;AAEA,MAAMA,MAAM,GAAGC,OAAO,CAAE,yBAAF,CAAtB;;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAE,cAAF,CAAzB;;AACA,MAAME,qBAAqB,GAAGF,OAAO,CAAE,oBAAF,CAArC;;AACA,MAAMG,SAAS,GAAGH,OAAO,CAAE,cAAF,CAAzB;;AACA,MAAMI,aAAa,GAAGJ,OAAO,CAAE,0BAAF,CAA7B;;iBAC2BA,OAAO,CAAE,yBAAF,C;MAA1BK,c,YAAAA,c;;kBAC2BL,OAAO,CAAE,iBAAF,C;MAAlCM,U,aAAAA,U;MAAYC,U,aAAAA,U;;AACpB,MAAMC,KAAK,GAAGR,OAAO,CAAE,OAAF,CAArB;;AACA,MAAMS,MAAM,GAAGT,OAAO,CAAE,aAAF,CAAP,CAAuBU,YAAvB,EAAf;;AACA,MAAMC,UAAU,GAAGX,OAAO,CAAE,aAAF,CAA1B;;AACA,MAAMY,SAAS,GAAGZ,OAAO,CAAE,kBAAF,CAAzB;;kBACkBA,OAAO,CAAE,UAAF,C;MAAjBa,K,aAAAA,K;;AAER,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAwC;AACtCjB,EAAAA,MAAM,CAACkB,GAAP,CAAY,EAAZ;AACAlB,EAAAA,MAAM,CAACmB,KAAP,CAAaH,GAAb,EAAkBC,GAAlB;AACD;;AAUDG,MAAM,CAACC,OAAP;AAAA;AAAA;AAAA,+CAAiB,WAAqBC,OAArB,EAAyC;AACxDf,IAAAA,UAAU,CAACe,OAAO,CAACC,qBAAT,CAAV;AAEAV,IAAAA,SAAS,CAACW,QAAV,CAAoB,aAApB;AACAZ,IAAAA,UAAU,CAAC,MAAM;AACfC,MAAAA,SAAS,CAACW,QAAV,CAAoB,WAApB;AACD,KAFS,CAAV;AAIA,UAAMC,SAAS,GAAGf,MAAM,CAACgB,SAAP,CAAkB,OAAlB,CAAlB;AACAD,IAAAA,SAAS,CAACE,MAAV,CAAkB,WAAlB,EAA8BL,OAAO,CAACM,SAAtC;;AATwD,uBAWxBxB,SAAS,mBACpCkB,OADoC;AAEvCO,MAAAA,UAAU,EAAEJ;AAF2B,OAXe;AAAA,UAWhDK,aAXgD,QAWhDA,aAXgD;;AAgBxD,UAAMzB,aAAa,CAAE,YAAF,EAAe;AAChC0B,MAAAA,OAAO,EAAED,aADuB;AAEhCD,MAAAA,UAAU,EAAEJ;AAFoB,KAAf,CAAnB,CAhBwD,CAqBxD;AACA;;AACAnB,IAAAA,cAAc;AAEd,QAAI0B,QAAJ;AACAA,IAAAA,QAAQ,GAAGhC,MAAM,CAACiC,aAAP,CACR,gDADQ,EAET;AAAEJ,MAAAA,UAAU,EAAEJ;AAAd,KAFS,CAAX;AAIAO,IAAAA,QAAQ,CAACE,KAAT;AACA,UAAM/B,qBAAqB,CAACmB,OAAD,CAArB,CAA+Ba,KAA/B,CAAqClB,GAAG,IAAI;AAChDF,MAAAA,aAAa,CAAE,sCAAF,EAAyCE,GAAzC,CAAb;AACD,KAFK,CAAN;AAGAe,IAAAA,QAAQ,CAACI,GAAT;AAEAJ,IAAAA,QAAQ,GAAGhC,MAAM,CAACiC,aAAP,CAAsB,gCAAtB,EAAuD;AAChEJ,MAAAA,UAAU,EAAEJ;AADoD,KAAvD,CAAX;AAGAO,IAAAA,QAAQ,CAACE,KAAT;;AACA,QAAI;AACF,YAAMhC,SAAS,CAACmC,UAAV,CAAqB;AACzBf,QAAAA,OADyB;AAEzBgB,QAAAA,KAAK,EAAG,YAFiB;AAGzBC,QAAAA,SAAS,EAAE,CAAC,GAAGzB,KAAK,CAAC0B,QAAN,GAAiBC,KAAjB,CAAuBC,IAAvB,EAAJ,CAHc;AAIzBV,QAAAA;AAJyB,OAArB,CAAN;AAMD,KAPD,CAOE,OAAOf,GAAP,EAAY;AACZF,MAAAA,aAAa,CACXf,MAAM,CAAC2C,WAAY;qCAEf1B,GAAG,CAAC2B,OAAJ,IAAe3B,GAAG,CAAC2B,OAAJ,CAAYC,IAA3B,GACK,cAAapC,KAAK,CAACqC,IAAN,CAAW7B,GAAG,CAAC2B,OAAJ,CAAYC,IAAvB,CAA6B,GAD/C,GAEK,EACN;;;OANQ,EAUX5B,GAVW,CAAb;AAYD;;AACDe,IAAAA,QAAQ,CAACI,GAAT;AAEA,UAAM/B,aAAa,CAAE,aAAF,EAAgB;AACjC0B,MAAAA,OAAO,EAAED,aADwB;AAEjCD,MAAAA,UAAU,EAAEJ;AAFqB,KAAhB,CAAnB;AAKAzB,IAAAA,MAAM,CAAC+C,IAAP,CAAa,oBAAmBC,OAAO,CAACC,MAAR,EAAiB,MAAjD;AAEAxB,IAAAA,SAAS,CAACyB,MAAV;AACA,UAAM1C,UAAU,EAAhB;AACD,GAxED;;AAAA,kBAAgC2C,KAAhC;AAAA;AAAA;AAAA","sourcesContent":["/* @flow */\n\nconst report = require(`gatsby-cli/lib/reporter`)\nconst buildHTML = require(`./build-html`)\nconst buildProductionBundle = require(`./build-javascript`)\nconst bootstrap = require(`../bootstrap`)\nconst apiRunnerNode = require(`../utils/api-runner-node`)\nconst { copyStaticDirs } = require(`../utils/get-static-dir`)\nconst { initTracer, stopTracer } = require(`../utils/tracer`)\nconst chalk = require(`chalk`)\nconst tracer = require(`opentracing`).globalTracer()\nconst signalExit = require(`signal-exit`)\nconst telemetry = require(`gatsby-telemetry`)\nconst { store } = require(`../redux`)\n\nfunction reportFailure(msg, err: Error) {\n  report.log(``)\n  report.panic(msg, err)\n}\n\ntype BuildArgs = {\n  directory: string,\n  sitePackageJson: object,\n  prefixPaths: boolean,\n  noUglify: boolean,\n  openTracingConfigFile: string,\n}\n\nmodule.exports = async function build(program: BuildArgs) {\n  initTracer(program.openTracingConfigFile)\n\n  telemetry.trackCli(`BUILD_START`)\n  signalExit(() => {\n    telemetry.trackCli(`BUILD_END`)\n  })\n\n  const buildSpan = tracer.startSpan(`build`)\n  buildSpan.setTag(`directory`, program.directory)\n\n  const { graphqlRunner } = await bootstrap({\n    ...program,\n    parentSpan: buildSpan,\n  })\n\n  await apiRunnerNode(`onPreBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  // Copy files from the static directory to\n  // an equivalent static directory within public.\n  copyStaticDirs()\n\n  let activity\n  activity = report.activityTimer(\n    `Building production JavaScript and CSS bundles`,\n    { parentSpan: buildSpan }\n  )\n  activity.start()\n  await buildProductionBundle(program).catch(err => {\n    reportFailure(`Generating JavaScript bundles failed`, err)\n  })\n  activity.end()\n\n  activity = report.activityTimer(`Building static HTML for pages`, {\n    parentSpan: buildSpan,\n  })\n  activity.start()\n  try {\n    await buildHTML.buildPages({\n      program,\n      stage: `build-html`,\n      pagePaths: [...store.getState().pages.keys()],\n      activity,\n    })\n  } catch (err) {\n    reportFailure(\n      report.stripIndent`\n        Building static HTML failed${\n          err.context && err.context.path\n            ? ` for path \"${chalk.bold(err.context.path)}\"`\n            : ``\n        }\n\n        See our docs page on debugging HTML builds for help https://gatsby.dev/debug-html\n      `,\n      err\n    )\n  }\n  activity.end()\n\n  await apiRunnerNode(`onPostBuild`, {\n    graphql: graphqlRunner,\n    parentSpan: buildSpan,\n  })\n\n  report.info(`Done building in ${process.uptime()} sec`)\n\n  buildSpan.finish()\n  await stopTracer()\n}\n"],"file":"build.js"}